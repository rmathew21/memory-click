{"version":3,"sources":["components/Jcard/Jcard.js","components/Scoreboard/scoreboard.js","App.js","serviceWorker.js","index.js"],"names":["Jcard","props","console","log","react_default","a","createElement","className","alt","onClick","handleClick","name","score","src","Scoreboard","highScore","App","state","message","shoes","shuffle","i","length","j","Math","floor","random","_ref","id","_this","filter","shoe","setState","_this2","this","class","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Scoreboard_scoreboard","map","image","components_Jcard_Jcard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d73ccdcf.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Jcard.css\";\n\nconst Jcard = props => \n{\n    console.log(props)\n    return (\n        <div className=\"card\">\n            <div className=\"img-fluid imgSize\" alt=\"Responsive image\">\n                <a onClick={() => props.handleClick(props.name)}\n                    className={props.score === 0 ? \"style-click\" : \"style-click\" }\n                    >\n                    <img alt={props.name} src={props.src} />\n                    </a>\n            </div>\n        </div>\n    )\n};\n\nexport default Jcard;","import React from \"react\";\nimport \"./scoreboard.css\";\n\nconst Scoreboard = props => (\n    <div className=\"col-12 score-board\">\n        <p>SCORE: {props.score} | HIGH SCORE: {props.highScore}</p>\n    </div>\n);\n\nexport default Scoreboard;","import React, { Component } from 'react';\nimport Jcard from './components/Jcard/Jcard';\nimport Scoreboard from \"./components/Scoreboard/scoreboard\";\nimport './App.css';\nimport shoes from \"./shoes.json\";\n\n\nclass App extends Component {\n  state = {\n    message: \"Click a Jordan to start\",\n    score: 0,\n    highScore: 0,\n    shoes\n  };\n\n  // Shuffle shoes \n   shuffle = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  };\n\n  // identify the shoe that was clicked\n  handleClick = id => {\n    // Filter this.state.shoes for shoes with an id not equal to the id being removed\n    const shoes = this.state.shoes.filter(shoe => shoe.id !== id);\n    console.log(shoes);\n    \n    if(shoes.length !== 0) {\n      this.setState({shoes: this.state.shoes.filter(shoe => shoe.id !== id)});\n      this.setState({score: this.state.score +1});\n    } else {\n      this.setState({score: 0, shoes: shoes})\n      if(this.state.score > this.state.highScore) {\n        this.setState({highScore: this.state.score});\n      }\n    }\n    // Set this.state.shoes equal to the new shoes array\n    // this.setState({ shoes });\n    this.shuffle(shoes);\n  };\n\n\nrender() {\n  return (\n    <div className=\"App\">\n      <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n  <a class=\"navbar-brand\" href=\"#\">Click-a-J</a>\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n  {/* <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n    <ul class=\"navbar-nav\">\n      <li class=\"nav-item active\">\n        <a class=\"nav-link\" href=\"#\">About <span class=\"sr-only\">(current)</span></a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"#\">Discover</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"#\">Search</a>\n      </li>\n    </ul>\n  </div> */}\n</nav>\n      <header className=\"App-header\">\n        <div className=\"jumbotron jumbotron-fluid\">\n        <img src=\"https://mk0slamonlinensgt39k.kinstacdn.com/wp-content/uploads/2018/09/pj-1.jpg\" class=\"tuck\" alt=\"sneakerKing\"/>\n          <div className=\"container\">\n            <h1 className=\"display-4\">Click on a pair of J's to start!</h1>\n            <p className=\"lead\">Keep clicking on a different pair to earn points. IF you choose the same pair twice, YOU LOSE and start fresh! First to 12 wins</p>\n          </div>\n          <div className=\"Scoreboard\">\n            <Scoreboard score={this.state.score} highScore={this.state.highScore} />\n          </div>\n        </div>\n        </header>\n\n        <div className=\"container\">\n          <div className=\"row\">\n            {shoes.map(image =>(\n              <Jcard\n              handleClick={this.handleClick}\n              id={image.id}\n              name={image.name}\n              src={image.image}\n              />\n            ))}\n          </div>\n        </div>\n        <footer className=\"container-fluid\">\n          <p>Created by Robin Mathew</p>\n        </footer>\n    </div>\n  );\n}\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}